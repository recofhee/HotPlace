package com.HotPlace.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.HotPlace.util.DBManager;
import com.HotPlace.util.SHA256;
import com.HotPlace.vo.ChartVo;
import com.HotPlace.vo.GameVO;
import com.HotPlace.vo.MemberVo;


public class ChartDao {
	private static ChartDao dao = new ChartDao();
	
	private ChartDao() {}
	
	public static ChartDao getInstance() {
		return dao;
	}
	
	/*
	// 연령에 따른 게임 장르 방법 1
	public List<ChartVo> getGameGenreNBirth() { 
		String sql = "select distinct game_genre, birth from member";
		
		List<ChartVo> list = new ArrayList<>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				ChartVo cVo = new ChartVo();
				
				cVo.setGameGenre(rs.getString("game_genre"));
				cVo.setBirthdate(rs.getString("birth"));
				
				list.add(cVo);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.close(conn, pstmt, rs);
		}
		return list;
		
	}
	*/
	
	// 연령에 따른 게임 장르 방법 2
	public List<ChartVo> getGameGenreNBirth() { 
		String sql = "with A as " + 
				"(select game_genre, birth, 10000 + to_number(to_char(sysdate, 'MMdd')) as nowmd, 10000 + to_number(substr(birth, 5, 4)) as birthmd, to_number(to_char(sysdate, 'yyyy') -  substr(birth, 1, 4)) + 1 as age " + 
				"from member) " + 
				"select game_genre, birth, " + 
				"    case when birth is null then '응답 안 함' " + 
				"         when age < 20 or (age = 20 and (nowmd < birthmd or nowmd = birthmd)) then '청소년' " + 
				"         else '성인' " + 
				"    end as generation " + 
				"from A";
		
		List<ChartVo> list = new ArrayList<>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				ChartVo cVo = new ChartVo();
				
				cVo.setGameGenre(rs.getString("game_genre"));
				cVo.setBirthdate(rs.getString("birth"));
				cVo.setGeneration(rs.getString("generation"));
				
				list.add(cVo);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.close(conn, pstmt, rs);
		}
		return list;
		
	}
	
	// 총 회원 수 가져오기
	public int getMemberCnt() {
		int result = 0;
		String sql = "select count(*) from member";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				result = rs.getInt(1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			DBManager.close(conn, pstmt, rs);
		}
		return result;
	}
	
	// 총 PC방 수 가져오기
	public int getPcCnt() {
		int result = 0;
		String sql = "select count(*) from pc";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				result = rs.getInt(1);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			DBManager.close(conn, pstmt, rs);
		}
		return result;
	}

}
