<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style type="text/css">
* {
	box-sizing: border-box;
	padding: 0;
	margin: 0;
}
section {
	background: #eee;
}
#canvas {
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select: none;
}

#chartjs-tooltip {
	opacity: 1;
	position: absolute;
	background: rgba(0, 0, 0, .7);
	color: white;
	border-radius: 3px;
	-webkit-transition: all .1s ease;
	transition: all .1s ease;
	pointer-events: none;
	-webkit-transform: translate(-50%, 0);
	transform: translate(-50%, 0);
}

.chart-canvas {
	margin: 0 auto;
}

.chartjs-tooltip-key {
	display: inline-block;
	width: 10px;
	height: 10px;
	margin-right: 10px;
}

.chart-wrap {
	width: 1100px !important;
	padding: 100px 0;
    margin: 0 auto;
}
.chart-wrap .row {
	display: flex;
    flex-wrap: wrap;
}
.chart-wrap .row-cards>[class*='col-'] {
	display: flex;
}
.chart-wrap .card {
    position: relative;
    width: 100%;
    min-width: 0;
    display: flex;
    flex-direction: column;
    word-wrap: break-word;
    background-color: #fff;
    background-clip: border-box;
    box-shadow: 0px 0px 10px rgba(69, 101, 173, 0.1);
    border-radius: 7px;
    margin-bottom: 1.5rem;
}
.chart-wrap .card-body {
	flex: 1 1 auto;
    margin: 0;
    padding: 1.5rem 1.5rem;
    position: relative;
}
.chart-wrap .card-body:last-child {
    margin-bottom: 0;
}
.chart-wrap .col {
	flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
}
.chart-wrap .text-muted {
    color: #999 !important;
}
.chart-wrap .col h3 {
	margin: 0;
}
.align-self-center {
    align-self: center !important;
}
.chart-circle {
    display: block;
    position: relative;
    margin: 0 auto;
}
.chart-circle-xs {
    height: 2.5rem;
    width: 2.5rem;
    font-size: .8rem;
}
.chart-circle canvas {
    margin: 0 auto;
    display: block;
    max-width: 100%;
    max-height: 100%;
}
.chart-wrap h2 {
    color: #444;
    margin-bottom: 40px;
}
</style>
<title>차트</title>
<link rel="stylesheet" href="css/bootstrap-grid.css">
<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
</head>
<body>
	
	<section>	
		<div class="col-12 chart-wrap">
			<div class="row row-cards">
				<div class="col-sm-12 col-md-6 col-lg-3">
					<div class="card">
						<div class="card-body">
							<div class="row">
								<div class="col">
									<div class="text-muted">?</div>
									<h3><b>125</b></h3>
								</div>
								<div class="col-auto align-self-center ">
									<div class="chart-circle chart-circle-xs"></div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="col-sm-12 col-md-6 col-lg-3">
					<div class="card">
						<div class="card-body">
							<div class="row">
								<div class="col">
									<div class="text-muted">총 회원 수</div>
									<h3><b>${memberCnt}</b></h3>
								</div>
								<div class="col-auto align-self-center">
									<div class="chart-circle chart-circle-xs">
										<canvas id="memberCntCanvas" width="100" height="100"></canvas>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="col-sm-12 col-md-6 col-lg-3">
					<div class="card">
						<div class="card-body">
							<div class="row">
								<div class="col">
									<div class="text-muted">총 PC방 수</div>
									<h3><b>${pcCnt}</b></h3>
								</div>
								<div class="col-auto align-self-center">
									<div class="chart-circle chart-circle-xs">
										<canvas id="pcCntCanvas" width="100" height="100"></canvas>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="col-sm-12 col-md-6 col-lg-3">
					<div class="card">
						<div class="card-body">
							<div class="row">
								<div class="col">
									<div class="text-muted">?</div>
									<h3><b>560</b></h3>
								</div>
								<div class="col-auto align-self-center">
									<div class="chart-circle chart-circle-xs"></div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="card">
				<div class="card-body">
					<h2>연령별 게임 장르 선호도</h2>
					<canvas id="canvasOne" class="chart-canvas chartjs-render-monitor" width="900" height="950"></canvas>
				</div>
			</div>
		</div>
	</section>
	
<script type="text/javascript"> 

/*
var randomScalingFactor = function() {
   return Math.round(Math.random() * 100);
};

var color = Chart.helpers.color;
var config = {
   type: 'radar',
   data: {
      datasets: [{
         label: 'My First dataset',
         data: [
         ]
      }, {
         label: 'My Second dataset',
         data: [
         ]
      }]
   },
   options: {
      scale: {
         ticks: {
            beginAtZero: true
         }
      }
   }
};

window.onload = function() {
   window.myRadar = new Chart(document.getElementById('canvas'), config);
};

document.getElementById('randomizeData').addEventListener('click', function() {
   config.data.datasets.forEach(function(dataset) {
      dataset.data = dataset.data.map(function() {
         return randomScalingFactor();
      });
   });

   window.myRadar.update();
});

var colorNames = Object.keys(window.chartColors);
document.getElementById('addDataset').addEventListener('click', function() {
   var colorName = colorNames[config.data.datasets.length % colorNames.length];
   var newColor = window.chartColors[colorName];

   var newDataset = {
      label: 'Dataset ' + config.data.datasets.length,
      borderColor: newColor,
      backgroundColor: color(newColor).alpha(0.2).rgbString(),
      pointBorderColor: newColor,
      data: [],
   };

   for (var index = 0; index < config.data.labels.length; ++index) {
      newDataset.data.push(randomScalingFactor());
   }

   config.data.datasets.push(newDataset);
   window.myRadar.update();
});

document.getElementById('addData').addEventListener('click', function() {
   if (config.data.datasets.length > 0) {
      config.data.labels.push('dataset #' + config.data.labels.length);

      config.data.datasets.forEach(function(dataset) {
         dataset.data.push(randomScalingFactor());
      });

      window.myRadar.update();
   }
});

document.getElementById('removeDataset').addEventListener('click', function() {
   config.data.datasets.splice(0, 1);
   window.myRadar.update();
});

document.getElementById('removeData').addEventListener('click', function() {
   config.data.labels.pop(); // remove the label first

   config.data.datasets.forEach(function(dataset) {
      dataset.data.pop();
   });

   window.myRadar.update();
});
*/

$(function() {
	
	var ctxMemCnt = $('#memberCntCanvas');
	var memCnt = ${memberCnt};
	var memCntLen = Math.floor(Math.log10(memCnt) + 1);
	var memCntMax = Math.pow(10, memCntLen);
	new Chart(ctxMemCnt, {
	    type: 'doughnut',
	    data: {
	      datasets: [
	        {
	          backgroundColor: ["#9585ad"],
	          data: [memCnt, memCntMax - memCntLen]
	        }
	      ]
	    },
	    options: {
	    	responsive : true,
	    	maintainAspectRatio: true, 
	    	tooltips: {
	    		enabled: false
	    	},
	        hover: {
	        	mode: null
	        },
	        animationEasing: 'easeOutQuint',
	        animateScale: true,
	        title: {
	        	display: false,
	        },
	        legend: {
	        	display: false, //hide legend
			}
	    }
	});
	
	var ctxPcCnt = $('#pcCntCanvas');
	var pcCnt = ${pcCnt};
	var pcCntLen = Math.floor(Math.log10(pcCnt) + 1);
	var pcCntMax = Math.pow(10, pcCntLen);
	new Chart(ctxPcCnt, {
	    type: 'doughnut',
	    data: {
	      datasets: [
	        {
	          backgroundColor: ["#e89d5f"],
	          data: [pcCnt, pcCntMax - pcCntLen]
	        }
	      ]
	    },
	    options: {
	    	responsive : true,
	    	maintainAspectRatio: true, 
	    	tooltips: {
	    		enabled: false
	    	},
	        hover: {
	        	mode: null
	        },
	        animationEasing: 'easeOutQuint',
	        animateScale: true,
	        title: {
	        	display: false,
	        },
	        legend: {
				display: false, //hide legend
			}
	    }
	});

	$.ajax('chartOne', {
		type : 'POST',
		dataType : 'json',
		success : function(data) {

			// 장르별 수 - 성인
			var rpgLenA = 0;
			var rtsLenA = 0;
			var raceSportLenA = 0;
			var fpsLenA = 0;

			// 장르별 수 - 청소년
			var rpgLenT = 0;
			var rtsLenT = 0;
			var raceSportLenT = 0;
			var fpsLenT = 0;

			// 장르별 수 - 응답 안 함
			var rpgLenN = 0;
			var rtsLenN = 0;
			var raceSportLenN = 0;
			var fpsLenN = 0;

			for (var i in data) {

				if (data[i].birthdate != null) {

					// 성인
					if (data[i].genre === 'RPG' && data[i].generation === '성인') {
						rpgLenA++;
					} else if (data[i].genre === 'RTS' && data[i].generation === '성인') {
						rtsLenA++;
					} else if (data[i].genre === '레이싱/스포츠' && data[i].generation === '성인') {
						raceSportLenA++;
					} else if (data[i].genre === 'FPS' && data[i].generation === '성인') {
						fpsLenA++;
					}

					// 청소년
					if (data[i].genre === 'RPG' && data[i].generation === '청소년') {
						rpgLenT++;
					} else if (data[i].genre === 'RTS' && data[i].generation === '청소년') {
						rtsLenT++;
					} else if (data[i].genre === '레이싱/스포츠' && data[i].generation === '청소년') {
						raceSportLenT++;
					} else if (data[i].genre === 'FPS' && data[i].generation === '청소년') {
						fpsLenT++;
					}

				} else {

					// 응답 안 함
					if (data[i].genre === 'RPG' && data[i].generation === '응답 안 함') {
						rpgLenN++;
					} else if (data[i].genre === 'RTS' && data[i].generation === '응답 안 함') {
						rtsLenN++;
					} else if (data[i].genre === '레이싱/스포츠' && data[i].generation === '응답 안 함') {
						raceSportLenN++;
					} else if (data[i].genre === 'FPS' && data[i].generation === '응답 안 함') {
						fpsLenN++;
					}

				}
			}

			var chartData = {
				labels : [ 'RPG', 'RTS', '레이싱/스포츠', 'FPS' ],
				datasets : [
					{
						label : "성인",
						lineTension : 0.1,
						backgroundColor : "rgba(102, 153, 204, 0.2)",
						borderColor : "rgba(102, 153, 204, 1)",
						pointBackgroundColor : "rgba(102, 153, 204, 1)",
						pointBorderColor : "#fff",
						pointHoverRadius : 5,
						pointHoverBackgroundColor : "#fff",
						pointHoverBorderColor : "rgba(102, 153, 204, 1)",
						data : [ rpgLenA, rtsLenA, raceSportLenA, fpsLenA ]
					},
					{
						label : "청소년",
						lineTension : 0.1,
						backgroundColor : "rgba(255, 204, 102, 0.2)",
						borderColor : "rgba(255, 204, 102, 1)",
						pointBackgroundColor : "rgba(255, 204, 102, 1)",
						pointBorderColor : "#fff",
						pointHoverRadius : 5,
						pointHoverBackgroundColor : "#fff",
						pointHoverBorderColor : "rgba(255, 204, 102, 1)",
						data : [ rpgLenT, rtsLenT, raceSportLenT, fpsLenT ]
					},
					{
						label : "응답 안 함",
						lineTension : 0.1,
						backgroundColor : "rgba(179, 181, 198, 0.2)",
						borderColor : "rgba(179, 181, 198, 1)",
						pointBackgroundColor : "rgba(179, 181, 198, 1)",
						pointBorderColor : "#fff",
						pointHoverRadius : 5,
						pointHoverBackgroundColor : "#fff",
						pointHoverBorderColor : "rgba(179, 181, 198, 1)",
						data : [ rpgLenN, rtsLenN, raceSportLenN, fpsLenN ]
					}
				]
			};

			var ctxOne = $('#canvasOne');

			var radarChart = new Chart(ctxOne, {
				type : 'radar',
				data : chartData,
				options : {
					responsive : true,
					scale : {
						angleLines : {
							display : true,
							lineWidth : 0.5,
							color : 'rgba(128, 128, 128, 0.2)'
						},
						pointLabels : {
							fontSize : 20,
							fontStyle : '300',
							fontColor : 'rgba(204, 204, 204, 1)',
							fontFamily : '"Lato", sans-serif'
						},
						ticks : {
							beginAtZero : true,
							maxTicksLimit : 3,
							min : 0,
							//max : 20,
							display : false
						}
					},
					legend : {
						display: true,
						//position: 'left',
						labels: {

						}
					}
				}
			});
		}
	});
});

</script>
</body>
</html>